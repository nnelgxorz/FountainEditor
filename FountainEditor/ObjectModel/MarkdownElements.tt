<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;

namespace FountainEditor.ObjectModel
{
<#
    var elementNames = new[] {
        "Bold",
		"Italic",
		"BoldItalic",
		"Underline"
    };

    foreach (var elementName in elementNames)
    {
#>
    public partial class <#= elementName #>Element : Element
    {
        public <#= elementName #>Element(string text)
            : base(text)
        {
            Initialize(text);
        }

        partial void Initialize(string text);

        public override void Accept(MarkdownVisitor visitor)
        {
            visitor.VisitAny(this);
            visitor.Visit(this);
        }
    }

<#
    }
#>
	public abstract class MarkdownVisitor
	{
		public virtual void VisitAny(Element element) { }
<#
	foreach (var elementName in elementNames)
	{
#>

		public virtual void Visit(<#= elementName #>Element element) { }
<#
	}
#>

        public void VisitAll(IEnumerable<Element> elements)
        {
            foreach (var element in elements)
            {
                element.Accept(this);
            }
        }
	}
}
